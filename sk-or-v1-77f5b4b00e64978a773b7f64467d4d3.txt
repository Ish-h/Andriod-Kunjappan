import streamlit as st
import requests

API_KEY = "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"
MODEL_CLAUDE = "anthropic/claude-3-haiku"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

st.set_page_config(page_title="‡¥Ü‡µª‡¥°‡µç‡¥∞‡µã‡¥Ø‡¥ø‡¥°‡µç ‡¥ï‡µÅ‡¥û‡µç‡¥û‡¥™‡µç‡¥™‡µª ü§ñ", layout="centered")

st.markdown("""
    <style>
        body {
            background-color: #fff4e6;
        }
        .main {
            background-color: #fff8f0;
            border-radius: 16px;
            padding: 20px;
            font-family: 'Noto Sans Malayalam', sans-serif;
        }
        .chat-bubble {
            background-color: #fff0d9;
            padding: 10px 15px;
            border-radius: 10px;
            margin: 5px 0;
        }
        .icon-box {
            text-align: center;
            font-size: 24px;
            margin-bottom: 5px;
        }
        .about-box {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #fff0d9;
            border-radius: 12px;
            padding: 10px;
            font-size: 14px;
            width: 220px;
        }
        .about-box img {
            width: 40px;
            vertical-align: middle;
        }
        .bot-peek {
            position: fixed;
            bottom: 10px;
            left: 10px;
            z-index: 10;
            width: 60px;
        }
    </style>
""", unsafe_allow_html=True)

# Bot peek image
st.markdown('<img class="bot-peek" src="https://i.imgur.com/fnwkU2N.png" alt="Bot">', unsafe_allow_html=True)

# About box with bot icon
st.markdown("""
<div class="about-box">
    <img src="https://i.imgur.com/YCm6xH9.png" alt="Bot">
    <strong>‡¥ï‡µÅ‡¥û‡µç‡¥û‡¥™‡µç‡¥™‡µª ‡¥Æ‡µã‡¥∂‡¥®‡¥≤‡µç‡¥≤ ü§ñ</strong><br>
    ‡¥Ü‡µª‡¥°‡µç‡¥∞‡µã‡¥Ø‡¥ø‡¥°‡µç ‡¥´‡µã‡¥£‡µÅ‡¥ï‡µæ ‡¥é‡¥≥‡µÅ‡¥™‡µç‡¥™‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥í‡¥∞‡µÅ ‡¥∏‡µÅ‡¥π‡µÉ‡¥§‡µç‡¥§‡µç. 
    ‡¥Æ‡µÅ‡¥§‡¥ø‡µº‡¥®‡µç‡¥®‡¥µ‡µº‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø, ‡¥≤‡¥≥‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥≠‡¥æ‡¥∑‡¥Ø‡¥ø‡µΩ.
</div>
""", unsafe_allow_html=True)

st.title("ü§ñ ‡¥Ü‡µª‡¥°‡µç‡¥∞‡µã‡¥Ø‡¥ø‡¥°‡µç ‡¥ï‡µÅ‡¥û‡µç‡¥û‡¥™‡µç‡¥™‡µª")
st.markdown("‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥é‡¥®‡µç‡¥§‡µç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç ‡¥µ‡µá‡¥£‡¥Ç ‡¥é‡¥®‡µç‡¥®‡µç ‡¥é‡¥¥‡µÅ‡¥§‡¥ø ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÇ üëµüë¥")

if "messages" not in st.session_state:
    st.session_state.messages = []

def query_openrouter(model, messages):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": model,
        "messages": messages
    }
    try:
        res = requests.post(API_URL, headers=headers, json=payload)
        res.raise_for_status()
        return res.json()["choices"][0]["message"]["content"].strip()
    except:
        return "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤. ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÇ."

def get_claude_malayalam_reply(user_prompt):
    messages = [
        {
            "role": "system",
            "content": (
                "‡¥®‡µÄ ‡¥í‡¥∞‡µÅ ‡¥µ‡¥≤‡¥ø‡¥Ø ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥∏‡µÅ‡¥π‡µÉ‡¥§‡µç‡¥§‡¥æ‡¥£‡µç üëµüë¥ ‡¥Æ‡µÅ‡¥§‡¥ø‡µº‡¥®‡µç‡¥®‡¥µ‡µº‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø."
                " ‡¥®‡¥≤‡µç‡¥≤ ‡¥≠‡¥æ‡¥∑‡¥Ø‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥≤‡¥≥‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥™‡¥±‡¥Ø‡µÇ."
                " ‡¥á‡¥Æ‡µã‡¥ú‡¥ø‡¥ï‡µæ ‡¥á‡¥ü‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï üòäüì±."
            )
        },
        {"role": "user", "content": user_prompt}
    ]
    return query_openrouter(MODEL_CLAUDE, messages)

user_input = st.text_input("‡¥§‡¥æ‡¥ô‡µç‡¥ï‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥é‡¥¥‡µÅ‡¥§‡µÇ üëá", key="input")
if user_input:
    reply = get_claude_malayalam_reply(user_input)
    st.session_state.messages.append(("user", user_input))
    st.session_state.messages.append(("bot", reply))

for role, msg in st.session_state.messages:
    if role == "user":
        st.markdown(f"üßì **‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ:** {msg}", unsafe_allow_html=True)
    else:
        st.markdown(f"ü§ñ **‡¥ï‡µÅ‡¥û‡µç‡¥û‡¥™‡µç‡¥™‡µª:** {msg}", unsafe_allow_html=True)

with st.expander("üì± ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥ê‡¥ï‡µç‡¥ï‡¥£‡µÅ‡¥ï‡µæ ‡¥ï‡¥æ‡¥£‡µÅ‡¥ï"):
    icons = ["üìû", "üí¨", "üñºÔ∏è", "üì∑", "‚úâÔ∏è"]
    labels = ["‡¥ï‡µã‡¥≥‡µÅ‡¥ï‡µæ", "‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡µç‡¥∏‡¥æ‡¥™‡µç‡¥™‡µç", "‡¥ó‡¥æ‡¥≤‡¥±‡¥ø", "‡¥ï‡µç‡¥Ø‡¥æ‡¥Æ‡¥±", "‡¥é‡¥∏‡µç‡¥é‡¥Ç‡¥é‡¥∏‡µç"]
    instructions = [
        "üìû ‡¥´‡µã‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª: ‡¥´‡µã‡µ∫ ‡¥ê‡¥ï‡µç‡¥ï‡µ∫ > ‡¥®‡¥Æ‡µç‡¥™‡µº > ‡¥π‡¥∞‡¥ø‡¥§ ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‚úÖ",
        "üí¨ ‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡µç‡¥∏‡¥æ‡¥™‡µç‡¥™‡µç: ‡¥ê‡¥ï‡µç‡¥ï‡µ∫ > ‡¥™‡µá‡¥∞‡µç > ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï",
        "üñºÔ∏è ‡¥ó‡¥æ‡¥≤‡¥±‡¥ø: ‡¥Ü‡µΩ‡¥¨‡¥Ç > ‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥ï‡¥æ‡¥£‡µÅ‡¥ï",
        "üì∑ ‡¥ï‡µç‡¥Ø‡¥æ‡¥Æ‡¥±: ‡¥ê‡¥ï‡µç‡¥ï‡µ∫ > ‡¥Æ‡¥ø‡¥°‡¥ø‡µΩ ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ > ‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡¥Ç üòÉ",
        "‚úâÔ∏è ‡¥Æ‡µÜ‡¥∏‡µá‡¥ú‡µç ‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡¥æ‡µª: ‡¥Æ‡µÜ‡¥∏‡µá‡¥ú‡µç > ‡¥®‡¥Æ‡µç‡¥™‡µº > ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‚úçÔ∏è"
    ]
    cols = st.columns(5)
    for i in range(5):
        with cols[i]:
            st.markdown(f"<div class='icon-box'>{icons[i]}</div>", unsafe_allow_html=True)
            st.markdown(f"<div style='text-align: center; font-size: 14px;'>{labels[i]}</div>", unsafe_allow_html=True)
            with st.expander("‚û°Ô∏è ‡¥µ‡¥ø‡¥∂‡¥¶‡¥Æ‡¥æ‡¥Ø‡¥ø"):
                st.markdown(instructions[i])
